//task 1
/*Использование метода тестирования
Регулярные выражения используются в языках программирования для сопоставления частей строк. Вы создаете шаблоны, чтобы помочь вам сделать это сопоставление.

Если вы хотите найти слово theв строке The dog chased the cat, вы можете использовать следующее регулярное выражение: /the/. Обратите внимание, что в регулярном выражении не требуются кавычки.

В JavaScript есть несколько способов использования регулярных выражений. Один из способов проверить регулярное выражение — использовать .test()метод. Метод .test()принимает регулярное выражение, применяет его к строке (которая помещается в круглые скобки) и возвращает trueили false, если ваш шаблон что-то находит или нет.

let testStr = "freeCodeCamp";
let testRegex = /Code/;
testRegex.test(testStr);
Метод testздесь возвращает true.

Примените регулярное выражение myRegexк строке, myStringиспользуя .test()метод.*/

let myString = "Hello, World!";
let myRegex = /Hello/;
let result = myRegex.test(myString);// Change this line

//task 2
/*Совпадение с литеральными строками
В последнем задании вы искали слово, Helloиспользуя регулярное выражение /Hello/. Это регулярное выражение искало буквальное совпадение строки Hello. 
Вот еще один пример поиска буквального совпадения строки Kevin:

let testStr = "Hello, my name is Kevin.";
let testRegex = /Kevin/;
testRegex.test(testStr);
Этот testвызов вернется true.

Любые другие формы Kevinне будут соответствовать. Например, регулярное выражение /Kevin/не будет соответствовать kevinили KEVIN.

let wrongRegex = /kevin/;
wrongRegex.test(testStr);
Этот testвызов вернется false.

Будущая задача покажет, как сопоставить и эти другие формы.

Завершите регулярное выражение waldoRegex, чтобы найти "Waldo"в строке waldoIsHidingбуквальное совпадение.*/

let waldoIsHiding = "Somewhere Waldo is hiding in this text.";
let waldoRegex = /Waldo/; // Change this line
let result = waldoRegex.test(waldoIsHiding);


//task 3
/*Сопоставьте литеральную строку с различными возможностями
Используя регулярные выражения, такие как /coding/, вы можете искать шаблон codingв другой строке.

Это мощный инструмент для поиска отдельных строк, но он ограничен только одним шаблоном. Вы можете искать несколько шаблонов, используя оператор alternationили OR: |.

Этот оператор сопоставляет шаблоны либо до, либо после него. Например, если вы хотите сопоставить строки yesили no, вам нужно регулярное выражение /yes|no/.

Вы также можете искать более двух шаблонов. Вы можете сделать это, добавив больше шаблонов с большим количеством ORоператоров, разделяющих их, например /yes|no|maybe/.

Заполните регулярное выражение petRegex, чтобы оно соответствовало домашним животным dog, cat, birdили fish.*/

let petString = "James has a pet cat.";
let petRegex = /dog|cat|bird|fish/; // Change this line
let result = petRegex.test(petString);

//task 4
/*Игнорировать регистр при сопоставлении
До сих пор вы рассматривали регулярные выражения для буквального сопоставления строк. Но иногда вы можете захотеть также сопоставить различия в регистре.

Регистр (или иногда регистр букв) — это разница между прописными и строчными буквами. Примеры прописных букв: A, B, и C. Примерами нижнего регистра являются a, bи c.

Вы можете сопоставить оба случая, используя так называемый флаг. Есть и другие флаги, но здесь вы сосредоточитесь на флаге, который игнорирует регистр — флаг i.
Вы можете использовать его, добавив в регулярное выражение. Пример использования этого флага /ignorecase/i. Это регулярное выражение может соответствовать строкам ignorecase, 
igNoreCaseи IgnoreCase.

Напишите регулярное выражение fccRegexдля соответствия freeCodeCampнезависимо от регистра. Ваше регулярное выражение не должно соответствовать никаким аббревиатурам или
вариациям с пробелами.*/

let myString = "freeCodeCamp";
let fccRegex = /freeCodeCamp/i; // Change this line
let result = fccRegex.test(myString);


//task 5
/*Извлечь совпадения
До сих пор вы только проверяли, существует ли шаблон в строке или нет. Вы также можете извлечь фактические совпадения, которые вы нашли с помощью .match()метода.

Чтобы использовать .match()метод, примените метод к строке и передайте регулярное выражение в круглых скобках.

Вот пример:

"Hello, World!".match(/Hello/);
let ourStr = "Regular expressions";
let ourRegex = /expressions/;
ourStr.match(ourRegex);
matchЗдесь вернется первый ["Hello"]и вернется второй ["expressions"].

Обратите внимание, что .matchсинтаксис является «противоположным» методу, .testкоторый вы использовали до сих пор:

'string'.match(/regex/);
/regex/.test('string');
Примените .match()метод для извлечения строки coding.*/
//task 6
/**/
//task 7
/**/
//task 8
/**/
//task 9
/**/
//task 10
/**/
